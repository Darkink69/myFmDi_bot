from http.server import BaseHTTPRequestHandler
import json
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, \
    CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
TOKEN = os.getenv('BOT_TOKEN')
IMAGE_URL = "https://9qhr1l4qpuouftdm.public.blob.vercel-storage.com/assets/slipper.png"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TOKEN).build()


def get_keyboard():
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='app')],
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='info')]
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_photo(
        photo=IMAGE_URL,
        caption=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!",
        reply_markup=get_keyboard()
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_photo(
        photo=IMAGE_URL,
        caption=f"–ü—Ä–∏–≤–µ—Ç, {update.message.text}!",
        reply_markup=get_keyboard()
    )


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'app':
        await query.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è")
    elif query.data == 'info':
        await query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(CallbackQueryHandler(button_click))


class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Webhook is ready!')

    def do_POST(self):
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))

            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            update = Update.de_json(data, application.bot)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            loop.run_until_complete(application.process_update(update))

            loop.close()

            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({"status": "ok"})
            self.wfile.write(response.encode('utf-8'))

        except Exception as e:
            print(f"Error: {e}")
            self.send_response(200)  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 Telegram!
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({"status": "error", "message": str(e)})
            self.wfile.write(response.encode('utf-8'))