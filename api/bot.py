import os
import requests
import json
from flask import Flask, request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

BASE_URL = f"https://api.telegram.org/bot{TOKEN}"
photo_url = "https://4pda.to/s/PXticcA7C2YgYaRJl9z1jCUxDne0Bcrj7uxw.png"

app = Flask(__name__)


def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    url = f"{BASE_URL}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }

    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, json=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Error sending message: {e}")
        return None


def send_photo(chat_id, photo_url, caption=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendPhoto"
    payload = {
        'chat_id': chat_id,
        'photo': photo_url
    }
    if caption:
        payload['caption'] = caption
        payload['parse_mode'] = 'HTML'
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending photo: {e}")
        return None


def answer_callback_query(callback_query_id):
    """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        url = f"{BASE_URL}/answerCallbackQuery"
        payload = {
            'callback_query_id': callback_query_id
        }
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        print(f"Error answering callback: {e}")


def get_main_menu_keyboard():

    return {
        'inline_keyboard': [
            [
                {'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'more_info'},
                {'text': '–ù–∞—á–∞—Ç—å', 'callback_data': 'start_action'}
            ]
        ]
    }


def get_radio_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 6 –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π"""
    return {
        'inline_keyboard': [
            [
                {'text': 'DI', 'callback_data': 'radio_di'},
                {'text': 'Rockradio', 'callback_data': 'radio_rockradio'}
            ],
            [
                {'text': 'Radiotunes', 'callback_data': 'radio_radiotunes'},
                {'text': 'Jazzradio', 'callback_data': 'radio_jazzradio'}
            ],
            [
                {'text': 'Classicalradio',
                 'callback_data': 'radio_classicalradio'},
                {'text': 'Zenradio', 'callback_data': 'radio_zenradio'}
            ]
        ]
    }


@app.route('/app/bot', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        print(f"Received data: {data}")

        if not data:
            return Response('No data', status=400)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')

            if text == '/start':
                user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                caption = (
                    f"–ü—Ä–∏–≤–µ—Ç {user_name}! üëã\n\n"
                    f"–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∞–º –≤–µ—Å—å –∞—Ä—Ö–∏–≤ mp3 —Ñ–∞–π–ª–æ–≤ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ —Ö–æ–ª–¥–∏–Ω–≥–∞ DI.FM\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –¥–ª—è —á–µ–≥–æ –≤—Å–µ —ç—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, –µ—Å–ª–∏ —É–∂–µ –∑–Ω–∞–µ—Ç–µ."
                )
                reply_markup = get_main_menu_keyboard()
                send_photo(chat_id, photo_url, caption, reply_markup)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif 'callback_query' in data:
            callback_query = data['callback_query']
            chat_id = callback_query['message']['chat']['id']
            callback_data = callback_query['data']
            callback_query_id = callback_query['id']

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            answer_callback_query(callback_query_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if callback_data == 'more_info':
                # –¢–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
                more_info_text = (
                    "<b>üéµ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    "<i>–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –º—É–∑—ã–∫–∏!</i>\n\n"
                    "<code>‚Ä¢ –°–∫–∞—á–∏–≤–∞–π—Ç–µ –∞—Ä—Ö–∏–≤—ã mp3 —Ñ–∞–π–ª–æ–≤</code>\n"
                    "<pre>‚Ä¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã DI.FM —Ö–æ–ª–¥–∏–Ω–≥–∞</pre>\n"
                    "<b>‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</b>\n"
                    "<i>‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑</i>\n\n"
                    "<u>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</u>\n"
                    "‚úì DI.FM\n"
                    "‚úì RockRadio.com\n"
                    "‚úì RadioTunes.com\n"
                    "‚úì JazzRadio.com\n"
                    "‚úì ClassicalRadio.com\n"
                    "‚úì ZenRadio.com\n\n"
                    "<b>–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üé∂</b>"
                )
                send_photo(chat_id, photo_url, more_info_text)

            elif callback_data == 'start_action':
                start_text = (
                    "üéß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é:</b>\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞—Ä—Ö–∏–≤—É mp3 —Ñ–∞–π–ª–æ–≤."
                )
                reply_markup = get_radio_keyboard()
                send_message(chat_id, start_text, reply_markup)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
            elif callback_data == 'radio_di':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>DI</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

            elif callback_data == 'radio_rockradio':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>Rockradio</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

            elif callback_data == 'radio_radiotunes':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>Radiotunes</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

            elif callback_data == 'radio_jazzradio':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>Jazzradio</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

            elif callback_data == 'radio_classicalradio':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>Classicalradio</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

            elif callback_data == 'radio_zenradio':
                send_message(chat_id,
                             "–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>Zenradio</b>\n\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞—á–∞—Ç–æ...")

        return Response('ok', status=200)

    except Exception as e:
        print(f"Error: {e}")
        return Response('Error', status=500)


@app.route('/app/set_webhook', methods=['GET'])
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        webhook_url = f"https://my-fm-di-bot.vercel.app/app/bot"
        print(f"Setting webhook to: {webhook_url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π callback queries
        response = requests.post(
            f"{BASE_URL}/setWebhook",
            json={
                'url': webhook_url,
                'allowed_updates': ['message', 'callback_query']
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É callback
            },
            timeout=15
        )

        result = response.json()
        print(f"Webhook result: {result}")

        if result.get('ok'):
            return Response(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}", status=200)
        else:
            return Response(f"–û—à–∏–±–∫–∞: {result}", status=500)

    except Exception as e:
        return Response(f"Error: {e}", status=500)


@app.route('/app/delete_webhook', methods=['GET'])
def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        response = requests.get(f"{BASE_URL}/deleteWebhook", timeout=10)
        result = response.json()
        return Response(f"Webhook —É–¥–∞–ª–µ–Ω: {result}", status=200)
    except Exception as e:
        return Response(f"Error: {e}", status=500)


@app.route('/')
def index():
    return "Telegram Radio Bot is running! Use /app/set_webhook to setup"


# –î–ª—è Vercel
app_instance = app

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    print(f"Starting server on port {port}")
    app.run(debug=True, host='0.0.0.0', port=port)