import os
import json
import requests
from flask import Flask, request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_BOT_TOKEN')
BASE_URL = f"https://api.telegram.org/bot{TOKEN}"
IMAGE_URL = "https://s3.twcstorage.ru/c6bae09a-a5938890-9b68-453c-9c54-76c439a70d3e/Roulette/10_000.png"

app = Flask(__name__)


def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML',
        'disable_web_page_preview': True
    }
    if reply_markup:
        payload['reply_markup'] = reply_markup

    try:
        response = requests.post(url, json=payload, timeout=15)
        return response.json()
    except Exception as e:
        print(f"Error sending message: {e}")
        return None


def send_photo(chat_id, photo_url, caption=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendPhoto"
    payload = {
        'chat_id': chat_id,
        'photo': photo_url
    }
    if caption:
        payload['caption'] = caption
        payload['parse_mode'] = 'HTML'
    if reply_markup:
        payload['reply_markup'] = reply_markup

    try:
        response = requests.post(url, json=payload, timeout=15)
        return response.json()
    except Exception as e:
        print(f"Error sending photo: {e}")
        return None


def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        response = requests.get(f"{BASE_URL}/deleteWebhook", timeout=15)
        return response.json()
    except Exception as e:
        print(f"Error deleting webhook: {e}")
        return None


def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
        import secrets
        secret_token = secrets.token_urlsafe(32)

        # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        vercel_url = os.getenv('VERCEL_URL')
        if vercel_url:
            webhook_url = f"https://{vercel_url}/webhook"
        else:
            host = request.headers.get('Host', 'your-vercel-project.vercel.app')
            webhook_url = f"https://{host}/webhook"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å —Å–µ–∫—Ä–µ—Ç–æ–º
        response = requests.post(
            f"{BASE_URL}/setWebhook",
            json={
                'url': webhook_url,
                'secret_token': secret_token,
                'allowed_updates': ['message', 'callback_query'],
                'drop_pending_updates': True
            },
            timeout=15
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['WEBHOOK_SECRET_TOKEN'] = secret_token

        result = response.json()
        result['webhook_url'] = webhook_url
        result['secret_token'] = secret_token

        return result
    except Exception as e:
        print(f"Error setting webhook: {e}")
        return None


def get_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'more_info'},
                {'text': '–ù–∞—á–∞—Ç—å', 'callback_data': 'start_action'}
            ]
        ]
    }


def get_number_buttons_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 6 –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–û–¥–∏–Ω', 'callback_data': 'number_1'},
                {'text': '–î–≤–∞', 'callback_data': 'number_2'},
                {'text': '–¢—Ä–∏', 'callback_data': 'number_3'}
            ],
            [
                {'text': '–ß–µ—Ç—ã—Ä–µ', 'callback_data': 'number_4'},
                {'text': '–ü—è—Ç—å', 'callback_data': 'number_5'},
                {'text': '–®–µ—Å—Ç—å', 'callback_data': 'number_6'}
            ]
        ]
    }


@app.route('/')
def index():
    return Response(
        'Telegram Interactive Bot is running! ü§ñ\n\n'
        'Send /start to begin interaction.\n'
        'The bot uses webhook with secret token for secure communication.',
        mimetype='text/plain'
    ), 200


@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Vercel + Telegram)
        secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        expected_secret = os.getenv('WEBHOOK_SECRET_TOKEN')

        if not expected_secret:
            # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
            print("WEBHOOK_SECRET_TOKEN not found in environment")
            return Response('Webhook not configured', status=500)

        if secret_token != expected_secret:
            print(
                f"Unauthorized: expected {expected_secret}, got {secret_token}")
            return Response('Unauthorized', status=401)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        if not
            return Response('No data', status=400)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
            if 'text' in message and message['text'] == '/start':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                caption = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üëã\n\n"
                    f"–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ "
                    f"—Å –ø–æ–º–æ—â—å—é inline-–∫–Ω–æ–ø–æ–∫ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."
                )

                reply_markup = get_main_menu_keyboard()
                send_photo(chat_id, IMAGE_URL, caption, reply_markup)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif 'callback_query' in
            callback_query = data['callback_query']
            chat_id = callback_query['message']['chat']['id']
            callback_data = callback_query['data']
            user_name = callback_query['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
            ack_url = f"{BASE_URL}/answerCallbackQuery"
            try:
                requests.post(ack_url, json={
                    'callback_query_id': callback_query['id'],
                    'text': '–û–±—Ä–∞–±–æ—Ç–∫–∞...',
                    'show_alert': False
                }, timeout=5)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if callback_data == 'more_info':
                more_info_text = (
                    f"üîç <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
                    f"–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ Telegram.\n\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
                    f"‚Ä¢ Callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π\n"
                    f"‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                    f"–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –ª—é–±—ã—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á!"
                )
                send_message(chat_id, more_info_text)

            elif callback_data == 'start_action':
                numbers_text = (
                    f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —à–µ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, "
                    f"—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç."
                )
                reply_markup = get_number_buttons_keyboard()
                send_message(chat_id, numbers_text, reply_markup)

            elif callback_data.startswith('number_'):
                number = callback_data.split('_')[1]
                response_text = (
                    f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ: <b>{number}</b>\n\n"
                    f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏. "
                    f"–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å "
                    f"–ª—é–±–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                send_message(chat_id, response_text)

        return Response('ok', status=200, mimetype='text/plain')

    except Exception as e:
        print(f"Error in webhook: {e}")
        return Response('Error', status=500)


@app.route('/set_webhook', methods=['GET'])
def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
        delete_result = delete_webhook()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        set_result = set_webhook()

        if set_result and set_result.get('ok'):
            return Response(
                json.dumps({
                    'status': 'success',
                    'message': 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                    'webhook_info': set_result,
                    'secret_token_set': bool(os.getenv('WEBHOOK_SECRET_TOKEN'))
                }, indent=2),
                mimetype='application/json'
            ), 200
        else:
            return Response(
                json.dumps({
                    'status': 'error',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫',
                    'details': set_result
                }),
                mimetype='application/json'
            ), 500

    except Exception as e:
        print(f"Error in set_webhook: {e}")
        return Response(
            json.dumps({'status': 'error', 'message': str(e)}),
            mimetype='application/json'
        ), 500


@app.route('/get_webhook_info', methods=['GET'])
def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ"""
    try:
        response = requests.get(f"{BASE_URL}/getWebhookInfo", timeout=15)
        data = response.json()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ä–µ—Ç–µ
        data['our_secret_token'] = bool(os.getenv('WEBHOOK_SECRET_TOKEN'))

        return Response(
            json.dumps(data, indent=2),
            mimetype='application/json'
        ), 200
    except Exception as e:
        return Response(
            json.dumps({'status': 'error', 'message': str(e)}),
            mimetype='application/json'
        ), 500


@app.route('/info', methods=['GET'])
def info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    return Response(
        json.dumps({
            'bot': 'Telegram Interactive Bot',
            'status': 'active',
            'features': [
                'Image sending on start',
                'Inline keyboard buttons',
                'Callback query processing',
                'Webhook with secret token'
            ],
            'image_url': IMAGE_URL,
            'endpoints': {
                'webhook': '/webhook',
                'set_webhook': '/set_webhook',
                'get_webhook_info': '/get_webhook_info',
                'info': '/info'
            },
            'webhook_secret_set': bool(os.getenv('WEBHOOK_SECRET_TOKEN'))
        }, indent=2),
        mimetype='application/json'
    ), 200


# –î–ª—è Vercel - —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_instance = app

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=True, host='0.0.0.0', port=port)
