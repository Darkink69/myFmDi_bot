import os
import requests
import json
from flask import Flask, request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

BASE_URL = f"https://api.telegram.org/bot{TOKEN}"
photo_url = "https://4pda.to/s/PXticcA7C2YgYaRJl9z1jCUxDne0Bcrj7uxw.png"

app = Flask(__name__)


def send_message(chat_id, text):
    """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"{BASE_URL}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text
    }

    try:
        response = requests.post(url, json=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Error sending message: {e}")
        return None


def send_photo(chat_id, photo_url, caption=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendPhoto"
    payload = {
        'chat_id': chat_id,
        'photo': photo_url
    }
    if caption:
        payload['caption'] = caption
        payload['parse_mode'] = 'HTML'
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending photo: {e}")
        return None


def get_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–ù–∞—á–∞—Ç—å', 'callback_data': 'start_action'},
                {'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'more_info'}
            ]
        ]
    }


def get_number_buttons_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 6 –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–û–¥–∏–Ω', 'callback_data': 'number_1'},
                {'text': '–î–≤–∞', 'callback_data': 'number_2'},
                {'text': '–¢—Ä–∏', 'callback_data': 'number_3'}
            ],
            [
                {'text': '–ß–µ—Ç—ã—Ä–µ', 'callback_data': 'number_4'},
                {'text': '–ü—è—Ç—å', 'callback_data': 'number_5'},
                {'text': '–®–µ—Å—Ç—å', 'callback_data': 'number_6'}
            ]
        ]
    }


@app.route('/app/bot', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ - –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–±–æ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        print(f"Received data: {data}")

        if not data:
            return Response('No data', status=400)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')

            if text == '/start':
                user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                send_message(chat_id,
                             f"–ü—Ä–∏–≤–µ—Ç {user_name}! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∞–º –≤–µ—Å—å –∞—Ä—Ö–∏–≤ mp3 —Ñ–∞–π–ª–æ–≤ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ —Ö–æ–ª–¥–∏–Ω–≥–∞ DI.FM\n\n"
                             f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –¥–ª—è —á–µ–≥–æ –≤—Å–µ —ç—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, –µ—Å–ª–∏ —É–∂–µ –∑–Ω–∞–µ—Ç–µ.")
                send_photo(chat_id, photo_url)
                reply_markup = get_main_menu_keyboard()

            elif text:
                send_message(chat_id, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
            elif 'callback_query' in data:
                callback_query = data['callback_query']
                chat_id = callback_query['message']['chat']['id']
                message_id = callback_query['message']['message_id']
                callback_data = callback_query['data']
                user_name = callback_query['from'].get('first_name',
                                                       '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback (—É–¥–∞–ª—è–µ—Ç "—á–∞—Å–∏–∫–∏" –≤ Telegram)
            # ack_url = f"{BASE_URL}/answerCallbackQuery"
            # requests.post(ack_url, json={
            #     'callback_query_id': callback_query['id'],
            #     'text': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...',
            #     'show_alert': False
            # })

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if callback_data == 'more_info':
                more_info_text = (
                    f"üîç <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
                    f"–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ Telegram.\n\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
                    f"‚Ä¢ Callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π\n"
                    f"‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                    f"–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –ª—é–±—ã—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á!"
                )
                send_message(chat_id, more_info_text)

            elif callback_data == 'start_action':
                numbers_text = (
                    f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —à–µ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, "
                    f"—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç."
                )
                reply_markup = get_number_buttons_keyboard()
                send_message(chat_id, numbers_text, reply_markup)

            elif callback_data.startswith('number_'):
                number = callback_data.split('_')[1]
                response_text = (
                    f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ: <b>{number}</b>\n\n"
                    f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏. "
                    f"–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å "
                    f"–ª—é–±–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                send_message(chat_id, response_text)

        return Response('ok', status=200, mimetype='text/plain')


    except Exception as e:
        print(f"Error: {e}")
        return Response('Error', status=500)


@app.route('/app/set_webhook', methods=['GET'])
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞
        # vercel_url = os.getenv('VERCEL_URL', 'my-fm-di-bot.vercel.app')
        # webhook_url = f"https://{vercel_url}/app/bot"
        webhook_url = f"https://my-fm-di-bot.vercel.app/app/bot"

        print(f"Setting webhook to: {webhook_url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        response = requests.post(
            f"{BASE_URL}/setWebhook",
            json={
                'url': webhook_url,
                'allowed_updates': ['message']
            },
            timeout=15
        )

        result = response.json()
        print(f"Webhook result: {result}")

        if result.get('ok'):
            return Response(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}", status=200)
        else:
            return Response(f"–û—à–∏–±–∫–∞: {result}", status=500)

    except Exception as e:
        return Response(f"Error: {e}", status=500)


@app.route('/app/delete_webhook', methods=['GET'])
def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        response = requests.get(f"{BASE_URL}/deleteWebhook", timeout=10)
        result = response.json()
        return Response(f"Webhook —É–¥–∞–ª–µ–Ω: {result}", status=200)
    except Exception as e:
        return Response(f"Error: {e}", status=500)


@app.route('/')
def index():
    return "Telegram Echo Bot is running! Use /app/set_webhook to setup"


# –î–ª—è Vercel
app_instance = app

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    print(f"Starting server on port {port}")
    app.run(debug=True, host='0.0.0.0', port=port)