import os
import json
import requests
from flask import Flask, request, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

BASE_URL = f"https://api.telegram.org/bot{TOKEN}"
IMAGE_URL = "https://4pda.to/s/PXticcA7C2YgYaRJl9z1jCUxDne0Bcrj7uxw.png"

app = Flask(__name__)


def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML',
        'disable_web_page_preview': True
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending message: {e}")
        return None


def send_photo(chat_id, photo_url, caption=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{BASE_URL}/sendPhoto"
    payload = {
        'chat_id': chat_id,
        'photo': photo_url
    }
    if caption:
        payload['caption'] = caption
        payload['parse_mode'] = 'HTML'
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending photo: {e}")
        return None


def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        response = requests.get(f"{BASE_URL}/deleteWebhook", timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error deleting webhook: {e}")
        return None


def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        vercel_url = os.getenv('VERCEL_URL')
        if vercel_url:
            webhook_url = f"https://{vercel_url}/api/webhook"
        else:
            # –ï—Å–ª–∏ VERCEL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            webhook_url = "https://my-fm-di-bot.vercel.app/api/webhook"

        print(f"Setting webhook to: {webhook_url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ë–ï–ó —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        response = requests.post(
            f"{BASE_URL}/setWebhook",
            json={
                'url': webhook_url,
                'allowed_updates': ['message', 'callback_query'],
                'drop_pending_updates': True
            },
            timeout=15
        )

        result = response.json()
        if result.get('ok'):
            print("Webhook set successfully")
        else:
            print(f"Webhook setting failed: {result}")

        return result

    except Exception as e:
        print(f"Error setting webhook: {e}")
        return {'ok': False, 'error': str(e)}


def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ"""
    try:
        response = requests.get(f"{BASE_URL}/getWebhookInfo", timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error getting webhook info: {e}")
        return None


def get_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'more_info'},
                {'text': '–ù–∞—á–∞—Ç—å', 'callback_data': 'start_action'}
            ]
        ]
    }


def get_number_buttons_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 6 –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        'inline_keyboard': [
            [
                {'text': '–û–¥–∏–Ω', 'callback_data': 'number_1'},
                {'text': '–î–≤–∞', 'callback_data': 'number_2'},
                {'text': '–¢—Ä–∏', 'callback_data': 'number_3'}
            ],
            [
                {'text': '–ß–µ—Ç—ã—Ä–µ', 'callback_data': 'number_4'},
                {'text': '–ü—è—Ç—å', 'callback_data': 'number_5'},
                {'text': '–®–µ—Å—Ç—å', 'callback_data': 'number_6'}
            ]
        ]
    }


@app.route('/')
def index():
    return Response(
        'Telegram Bot is running! ü§ñ\n\n'
        'Endpoints:\n'
        '- /api/set_webhook - Setup webhook\n'
        '- /api/webhook_info - Get webhook info\n'
        '- /api/webhook - Telegram webhook endpoint',
        mimetype='text/plain'
    ), 200


@app.route('/api/webhook', methods=['POST'])
def webhook_handler():
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        # –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        print("Webhook request received")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        if not data:
            print("No data received")
            return Response('No data', status=400)

        print(
            f"Received update: {json.dumps(data, indent=2, ensure_ascii=False)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            if 'text' in message and message['text'] == '/start':
                caption = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üëã\n\n"
                    f"–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ "
                    f"—Å –ø–æ–º–æ—â—å—é inline-–∫–Ω–æ–ø–æ–∫ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."
                )
                reply_markup = get_main_menu_keyboard()
                send_photo(chat_id, IMAGE_URL, caption, reply_markup)
                print(f"Sent welcome message to {chat_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        elif 'callback_query' in data:
            callback_query = data['callback_query']
            chat_id = callback_query['message']['chat']['id']
            callback_data = callback_query['data']
            user_name = callback_query['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            # –û—Ç–≤–µ—Ç –Ω–∞ callback query
            try:
                requests.post(
                    f"{BASE_URL}/answerCallbackQuery",
                    json={'callback_query_id': callback_query['id']},
                    timeout=5
                )
            except Exception as e:
                print(f"Error answering callback: {e}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
            if callback_data == 'more_info':
                more_info_text = (
                    f"üîç <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
                    f"–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ Telegram.\n\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
                    f"‚Ä¢ Callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π\n"
                    f"‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                    f"–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –ª—é–±—ã—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á!"
                )
                send_message(chat_id, more_info_text)
                print(f"Sent more info to {chat_id}")

            elif callback_data == 'start_action':
                numbers_text = (
                    f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —à–µ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, "
                    f"—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç."
                )
                reply_markup = get_number_buttons_keyboard()
                send_message(chat_id, numbers_text, reply_markup)
                print(f"Sent number selection to {chat_id}")

            elif callback_data.startswith('number_'):
                number = callback_data.split('_')[1]
                response_text = (
                    f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ: <b>{number}</b>\n\n"
                    f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏. "
                    f"–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å "
                    f"–ª—é–±–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                send_message(chat_id, response_text)
                print(f"Sent number response to {chat_id}")

        return Response('ok', status=200, mimetype='text/plain')

    except Exception as e:
        print(f"Error in webhook handler: {e}")
        return Response('Server Error', status=500)


@app.route('/api/set_webhook', methods=['GET', 'POST'])
def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        delete_result = delete_webhook()
        print(f"Delete webhook result: {delete_result}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –ë–ï–ó —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        set_result = set_webhook()

        if set_result and set_result.get('ok'):
            webhook_info = get_webhook_info()
            return Response(
                json.dumps({
                    'status': 'success',
                    'message': 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)',
                    'set_result': set_result,
                    'webhook_info': webhook_info,
                    'note': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è'
                }, indent=2, ensure_ascii=False),
                mimetype='application/json'
            ), 200
        else:
            return Response(
                json.dumps({
                    'status': 'error',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫',
                    'details': set_result
                }, indent=2),
                mimetype='application/json'
            ), 500

    except Exception as e:
        print(f"Error in setup_webhook: {e}")
        return Response(
            json.dumps({
                'status': 'error',
                'message': str(e)
            }),
            mimetype='application/json'
        ), 500


@app.route('/api/webhook_info', methods=['GET'])
def webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ"""
    try:
        info = get_webhook_info()

        response_data = {
            'webhook_info': info,
            'status': 'success',
            'note': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω'
        }

        return Response(
            json.dumps(response_data, indent=2, ensure_ascii=False),
            mimetype='application/json'
        ), 200

    except Exception as e:
        return Response(
            json.dumps({'status': 'error', 'message': str(e)}),
            mimetype='application/json'
        ), 500


@app.route('/api/delete_webhook', methods=['GET'])
def delete_webhook_route():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        result = delete_webhook()
        return Response(
            json.dumps({
                'status': 'success',
                'message': 'Webhook —É–¥–∞–ª–µ–Ω',
                'result': result
            }, indent=2),
            mimetype='application/json'
        ), 200
    except Exception as e:
        return Response(
            json.dumps({'status': 'error', 'message': str(e)}),
            mimetype='application/json'
        ), 500


@app.route('/api/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return Response(
        json.dumps({
            'status': 'active',
            'bot_token_set': bool(TOKEN),
            'webhook_secret': 'disabled',
            'endpoints': {
                'webhook': '/api/webhook',
                'set_webhook': '/api/set_webhook',
                'webhook_info': '/api/webhook_info',
                'delete_webhook': '/api/delete_webhook',
                'status': '/api/status'
            }
        }, indent=2),
        mimetype='application/json'
    ), 200


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è favicon.ico
@app.route('/favicon.ico')
def favicon():
    return Response('', status=204)


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
app_instance = app

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    print(f"Starting server on port {port}")
    print("Webhook secret: DISABLED")
    app.run(debug=True, host='0.0.0.0', port=port)